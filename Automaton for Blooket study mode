(function () {
  // ----- Styles -----
  const style = document.createElement('style');
  style.textContent = `
    #clickerPanel {
      position: fixed;
      top: 50px;
      left: 50px;
      background: #222;
      color: white;
      padding: 10px 15px 15px 15px;
      border-radius: 8px;
      z-index: 9999;
      font-family: sans-serif;
      box-shadow: 0 0 10px #000;
      min-width: 260px;
      user-select: none;
    }
    #clickerPanel button {
      margin: 5px 5px 0 0;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      font-weight: bold;
      padding: 5px 10px;
    }
    #startClicker { background-color: #28a745; color: white; }
    #stopClicker { background-color: #dc3545; color: white; }
    #toggleAnimations { background-color: #ffc107; color: black; }
    #setClickPosition { background-color: #007bff; color: white; }
    #clearClickPoint { background-color: #6c757d; color: white; }

    .clickerHeaderButton {
      background: #888;
      color: white;
      width: 24px;
      height: 24px;
      border-radius: 50%;
      border: none;
      cursor: pointer;
      font-size: 16px;
      line-height: 1;
      display: flex;
      align-items: center;
      justify-content: center;
      user-select: none;
      margin-left: 5px;
    }

    #header {
      display: flex;
      align-items: center;
      justify-content: space-between;
      user-select: none;
    }

    #headerTitle {
      font-weight: bold;
      font-size: 18px;
    }

    #headerButtons {
      display: flex;
      align-items: center;
      user-select: none;
    }

    #clickerStatus {
      margin: 10px 0 0 0;
      font-size: 13px;
      user-select: none;
    }
    #clickerStatus .dot {
      font-size: 20px;
      vertical-align: middle;
    }
    .running .dot { color: #28a745; }
    .stopped .dot { color: #dc3545; }

    #delayControl {
      margin-top: 10px;
      user-select: none;
    }
    #delayLabel {
      margin-bottom: 4px;
      display: block;
    }
    input[type="range"] {
      width: 100%;
    }
  `;
  document.head.appendChild(style);

  // ----- GUI Panel -----
  const panel = document.createElement('div');
  panel.id = 'clickerPanel';
  panel.innerHTML = `
    <div id="header">
      <div id="headerTitle">Auto Clicker</div>
      <div id="headerButtons">
        <button id="minimizeClicker" class="clickerHeaderButton">üóï</button>
        <button id="closeClicker" class="clickerHeaderButton">‚úï</button>
      </div>
    </div>

    <div id="clickerContent">
      <div>
        <button id="startClicker">Start</button>
        <button id="stopClicker">Stop</button>
      </div>

      <div id="clickerStatus" class="stopped">
        <span class="dot">‚óè</span> Stopped
      </div>

      <div id="delayControl">
        <label id="delayLabel">Delay: <span id="delayValue">0</span> ms</label>
        <input type="range" id="clickDelaySlider" min="0" max="1000" value="0">
      </div>

      <div style="margin-top:10px;">
        <button id="setClickPosition">Set Click Point</button>
        <button id="clearClickPoint">Clear Click Point</button>
      </div>

      <div style="margin-top: 10px;">Toggle Animation Effects</div>
      <button id="toggleAnimations" style="margin-top: 5px;">Toggle Animations</button>
    </div>
  `;
  document.body.appendChild(panel);

  // ----- Dragging -----
  let isDragging = false, offsetX = 0, offsetY = 0;
  panel.addEventListener('mousedown', e => {
    if (!['BUTTON', 'INPUT'].includes(e.target.tagName)) {
      isDragging = true;
      offsetX = e.offsetX;
      offsetY = e.offsetY;
    }
  });
  document.addEventListener('mousemove', e => {
    if (isDragging) {
      panel.style.left = `${e.pageX - offsetX}px`;
      panel.style.top = `${e.pageY - offsetY}px`;
    }
  });
  document.addEventListener('mouseup', () => isDragging = false);

  // ----- Clicker Logic -----
  let clickerInterval = null;
  let currentDelay = 0;
  let fixedClickPosition = null;
  let awaitingClick = false;

  const updateStatus = (running) => {
    const status = document.getElementById('clickerStatus');
    status.className = running ? 'running' : 'stopped';
    status.innerHTML = `<span class="dot">‚óè</span> ${running ? 'Running' : 'Stopped'}`;
  };

  function startClicker() {
    stopClicker();
    clickerInterval = setInterval(() => {
      const { clientX, clientY } = fixedClickPosition || { clientX: 0, clientY: 0 };
      const el = document.elementFromPoint(clientX, clientY);
      if (el && !panel.contains(el)) {
        el.click();

        const spaceEvent = new KeyboardEvent('keydown', {
          key: ' ',
          code: 'Space',
          keyCode: 32,
          which: 32,
          bubbles: true,
          cancelable: true
        });
        document.dispatchEvent(spaceEvent);
      }
    }, currentDelay);
    updateStatus(true);
  }

  function stopClicker() {
    if (clickerInterval) {
      clearInterval(clickerInterval);
      clickerInterval = null;
    }
    updateStatus(false);
  }

  // ----- Set Click Point on Next Click -----
  document.getElementById('setClickPosition').onclick = () => {
    alert("Click anywhere on the screen to set the click point.");
    awaitingClick = true;
  };

  document.addEventListener('click', (e) => {
    if (awaitingClick && !panel.contains(e.target)) {
      fixedClickPosition = { clientX: e.clientX, clientY: e.clientY };
      alert(`Click point set at X: ${fixedClickPosition.clientX}, Y: ${fixedClickPosition.clientY}`);
      awaitingClick = false;
      e.preventDefault();
      e.stopPropagation();
    }
  }, true);

  // ----- Clear Click Point -----
  document.getElementById('clearClickPoint').onclick = () => {
    fixedClickPosition = null;
    alert('Fixed click point cleared.');
  };

  // ----- Animation toggle -----
  let animationsDisabled = false;
  let animStyle = null;
  document.getElementById('toggleAnimations').onclick = () => {
    if (!animationsDisabled) {
      animStyle = document.createElement("style");
      animStyle.textContent = `* { transition: none !important; animation: none !important; }`;
      document.head.appendChild(animStyle);
      document.getElementById('toggleAnimations').style.backgroundColor = '#28a745';
      document.getElementById('toggleAnimations').style.color = 'white';
    } else {
      animStyle?.remove();
      document.getElementById('toggleAnimations').style.backgroundColor = '#ffc107';
      document.getElementById('toggleAnimations').style.color = 'black';
    }
    animationsDisabled = !animationsDisabled;
  };

  // ----- Delay Slider -----
  const delaySlider = document.getElementById('clickDelaySlider');
  const delayValueLabel = document.getElementById('delayValue');
  delaySlider.oninput = () => {
    currentDelay = parseInt(delaySlider.value);
    delayValueLabel.textContent = currentDelay;
    if (clickerInterval) startClicker();
  };
  delaySlider.oninput();

  // ----- Control Buttons -----
  document.getElementById('startClicker').onclick = startClicker;
  document.getElementById('stopClicker').onclick = stopClicker;

  document.getElementById('closeClicker').onclick = () => {
    stopClicker();
    animStyle?.remove();
    panel.remove();
    style.remove();
  };

  const contentDiv = document.getElementById('clickerContent');
  let minimized = false;
  document.getElementById('minimizeClicker').onclick = () => {
    minimized = !minimized;
    contentDiv.style.display = minimized ? 'none' : 'block';
    document.getElementById('minimizeClicker').textContent = minimized ? 'üóñ' : 'üóï';
  };
})();
